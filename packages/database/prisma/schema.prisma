datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

enum Plan {
  free
  premium
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  email          String    @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  hashedPassword String?

  activeWorkspace String?

  accounts           Account[]
  sessions           Session[]
  resetTokens        ResetPasswordToken[]
  verificationTokens VerificationToken[]
  workspaces         WorkspaceMember[]

  @@map(name: "users")
}

model VerificationToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  identifier String
  expires    DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "verification_tokens")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  used      Boolean  @default(false)

  @@index([userId])
  @@map(name: "reset_password_tokens")
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  color String @default("#ef4444")
  name  String
  slug  String @unique
  plan  Plan   @default(free)

  inviteSlugEnabled Boolean @default(true)
  inviteSlug        String  @unique @default(uuid())

  members WorkspaceMember[]

  @@map(name: "workspaces")
}

enum WorkspaceMemberRole {
  admin
  owner
  member
}

model WorkspaceMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  role WorkspaceMemberRole @default(member)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([userId])
  @@map(name: "workspace_members")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  name      String
  color     String @default("#ef4444")

  @@index([id])
  @@map(name: "projects")
}